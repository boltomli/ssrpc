// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: sound.proto

package ssrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Sound_Stretch_FullMethodName = "/Sound/Stretch"
)

// SoundClient is the client API for Sound service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SoundClient interface {
	Stretch(ctx context.Context, in *StretchRequest, opts ...grpc.CallOption) (*StretchResponse, error)
}

type soundClient struct {
	cc grpc.ClientConnInterface
}

func NewSoundClient(cc grpc.ClientConnInterface) SoundClient {
	return &soundClient{cc}
}

func (c *soundClient) Stretch(ctx context.Context, in *StretchRequest, opts ...grpc.CallOption) (*StretchResponse, error) {
	out := new(StretchResponse)
	err := c.cc.Invoke(ctx, Sound_Stretch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SoundServer is the server API for Sound service.
// All implementations must embed UnimplementedSoundServer
// for forward compatibility
type SoundServer interface {
	Stretch(context.Context, *StretchRequest) (*StretchResponse, error)
	mustEmbedUnimplementedSoundServer()
}

// UnimplementedSoundServer must be embedded to have forward compatible implementations.
type UnimplementedSoundServer struct {
}

func (UnimplementedSoundServer) Stretch(context.Context, *StretchRequest) (*StretchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stretch not implemented")
}
func (UnimplementedSoundServer) mustEmbedUnimplementedSoundServer() {}

// UnsafeSoundServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SoundServer will
// result in compilation errors.
type UnsafeSoundServer interface {
	mustEmbedUnimplementedSoundServer()
}

func RegisterSoundServer(s grpc.ServiceRegistrar, srv SoundServer) {
	s.RegisterService(&Sound_ServiceDesc, srv)
}

func _Sound_Stretch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StretchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoundServer).Stretch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sound_Stretch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoundServer).Stretch(ctx, req.(*StretchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sound_ServiceDesc is the grpc.ServiceDesc for Sound service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sound_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Sound",
	HandlerType: (*SoundServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stretch",
			Handler:    _Sound_Stretch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sound.proto",
}
